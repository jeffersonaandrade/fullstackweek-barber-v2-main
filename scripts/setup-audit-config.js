const fs = require('fs')
const path = require('path')

console.log('üîß Configurando sistema de logs de auditoria otimizado...')

// Verificar se o arquivo .env existe
const envPath = path.join(process.cwd(), '.env')
if (!fs.existsSync(envPath)) {
  console.error('‚ùå Arquivo .env n√£o encontrado!')
  console.log('üìù Crie um arquivo .env na raiz do projeto com as seguintes vari√°veis:')
  console.log('')
  console.log('NEXT_PUBLIC_SUPABASE_URL=sua_url_do_supabase')
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY=sua_chave_anonima')
  console.log('SUPABASE_SERVICE_ROLE_KEY=sua_chave_service_role')
  console.log('NEXTAUTH_SECRET=seu_secret_do_nextauth')
  console.log('NEXTAUTH_URL=http://localhost:3000')
  console.log('AUDIT_LOG_LEVEL=CRITICAL')
  console.log('')
  process.exit(1)
}

// Ler o arquivo .env
let envContent = fs.readFileSync(envPath, 'utf8')

// Verificar se AUDIT_LOG_LEVEL j√° existe
if (!envContent.includes('AUDIT_LOG_LEVEL=')) {
  console.log('‚úÖ Adicionando AUDIT_LOG_LEVEL=CRITICAL ao .env...')
  envContent += '\n# Configura√ß√£o de logs de auditoria (CRITICAL, IMPORTANT, ALL)\nAUDIT_LOG_LEVEL=CRITICAL\n'
  fs.writeFileSync(envPath, envContent)
  console.log('‚úÖ AUDIT_LOG_LEVEL configurado como CRITICAL')
} else {
  console.log('‚ÑπÔ∏è  AUDIT_LOG_LEVEL j√° configurado')
}

console.log('')
console.log('üìä Configura√ß√£o de logs de auditoria:')
console.log('')
console.log('üî¥ CRITICAL (padr√£o):')
console.log('   - Apenas eventos cr√≠ticos de seguran√ßa')
console.log('   - Acesso n√£o autorizado')
console.log('   - Atividade suspeita')
console.log('   - Acesso administrativo')
console.log('   - Exclus√µes de barbearias')
console.log('   - Processamento de pagamentos')
console.log('')
console.log('üü° IMPORTANT:')
console.log('   - Inclui CRITICAL +')
console.log('   - Login/registro de usu√°rios')
console.log('   - Cria√ß√£o/edi√ß√£o de barbearias')
console.log('   - Cria√ß√£o de agendamentos')
console.log('   - Rate limit excedido')
console.log('')
console.log('üü¢ ALL:')
console.log('   - Todos os eventos (n√£o recomendado para plano gratuito)')
console.log('')
console.log('üí° Para alterar o n√≠vel, edite AUDIT_LOG_LEVEL no arquivo .env')
console.log('')
console.log('‚öôÔ∏è  Configura√ß√µes ativas:')
console.log('   - M√°ximo 100 logs por hora')
console.log('   - Limpeza autom√°tica ap√≥s 30 dias')
console.log('   - Processamento em lotes de 10')
console.log('   - Rate limiting baseado em mem√≥ria (sem Redis)')
console.log('')
console.log('‚úÖ Configura√ß√£o conclu√≠da!')
console.log('')
console.log('üöÄ Para testar o sistema:')
console.log('   1. npm run dev')
console.log('   2. Tente acessar /admin sem estar logado')
console.log('   3. Verifique os logs no Supabase (tabela audit_logs)')
console.log('')
console.log('üìà Para monitorar o uso:')
console.log('   - Verifique a tabela audit_logs no Supabase')
console.log('   - Monitore o console do servidor para avisos de limite')
console.log('   - Use o script de limpeza: node scripts/cleanup-audit-logs.js') 